import os
import requests
import re
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# Fragment API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
FRAGMENT_API_URL = "https://api.fragment-api.com/v1"
TOKEN_FRAGMENT = "eyJhbGciO131313cCI6IkpXVCJ9.123123.123123123123123123" # –≠—Ç–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç —Ç–æ–∫–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è https://fragment-api.com/dashboard –≤ –≤–∫–ª–∞–¥–∫–µ Fragment Connections

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
username = "dobrozor"  # –õ—é–±–æ–µ –∏–º—è, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –º–æ—ë
quantity = 50 


def get_ton_price():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∫—É—Ä—Å–∞ TON –∫ —Ä—É–±–ª—é —Å CoinGecko"""
    try:
        response = requests.get(
            "https://api.coingecko.com/api/v3/simple/price?ids=the-open-network&vs_currencies=rub",
            timeout=10
        )
        if response.status_code == 200:
            data = response.json()
            return data['the-open-network']['rub']
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å TON, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback 280 —Ä—É–±")
            return 280  # fallback –∫—É—Ä—Å
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞: {e}, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback 280 —Ä—É–±")
        return 280  # fallback –∫—É—Ä—Å


def send_stars_directly(username, quantity):
    """–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–≤–µ–∑–¥
        data = {
            "username": username,
            "quantity": quantity,
            "show_sender": "false"
        }
        headers = {
            "Authorization": f"JWT {TOKEN_FRAGMENT}",
            "Content-Type": "application/json"
        }

        res = requests.post(f"{FRAGMENT_API_URL}/order/stars/", json=data, headers=headers)

        if res.status_code == 200:
            return True, "–£—Å–ø–µ—à–Ω–æ"
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ –æ—à–∏–±–∫–∏
            error_text = res.text
            amount_match = re.search(r"transaction total: (\d+\.\d+) TON", error_text)
            if amount_match:
                return False, amount_match.group(1) + " TON"
            else:
                return False, "–°—É–º–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—à–∏–±–∫–µ"

    except Exception as e:
        return False, str(e)


def send_stars_auto(username, quantity):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    success, message = send_stars_directly(username, quantity)
    return success, message


if __name__ == "__main__":
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å TON
    TON_TO_RUB = get_ton_price()

    print(f"üìä –¶–µ–Ω–∞ 1 TON: {TON_TO_RUB:.2f} —Ä—É–±")

    success, message = send_stars_auto(username, quantity)

    if success:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤. –ó–≤–µ–∑–¥—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã. –í–ê–ñ–ù–û! –ö–æ—à–µ–ª–µ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç–æ–π")
    else:
        if "TON" in message:
            ton_amount = message.replace(" TON", "")
            ton_float = float(ton_amount)
            rub_amount = ton_float * TON_TO_RUB

            one_star_ton = ton_float / quantity
            one_star_rub = rub_amount / quantity

            print(f"‚≠ê –¶–µ–Ω–∞ 1 –∑–≤–µ–∑–¥—ã: {one_star_ton:.6f} TON ({one_star_rub:.2f} —Ä—É–±)")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {message}")
